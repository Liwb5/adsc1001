# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from imu_image/imuData.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class imuData(genpy.Message):
  _md5sum = "5325de38e0d380e0ca6702d20e83c608"
  _type = "imu_image/imuData"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """int64 count
float64 timeStamp
float32 gravWithAccel_x
float32 gravWithAccel_y
float32 gravWithAccel_z
float32 quat_w
float32 quat_x
float32 quat_y
float32 quat_z
float32 linearAccel_x
float32 linearAccel_y
float32 linearAccel_z
float32 gravity_x
float32 gravity_y
float32 gravity_z
"""
  __slots__ = ['count','timeStamp','gravWithAccel_x','gravWithAccel_y','gravWithAccel_z','quat_w','quat_x','quat_y','quat_z','linearAccel_x','linearAccel_y','linearAccel_z','gravity_x','gravity_y','gravity_z']
  _slot_types = ['int64','float64','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       count,timeStamp,gravWithAccel_x,gravWithAccel_y,gravWithAccel_z,quat_w,quat_x,quat_y,quat_z,linearAccel_x,linearAccel_y,linearAccel_z,gravity_x,gravity_y,gravity_z

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(imuData, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.count is None:
        self.count = 0
      if self.timeStamp is None:
        self.timeStamp = 0.
      if self.gravWithAccel_x is None:
        self.gravWithAccel_x = 0.
      if self.gravWithAccel_y is None:
        self.gravWithAccel_y = 0.
      if self.gravWithAccel_z is None:
        self.gravWithAccel_z = 0.
      if self.quat_w is None:
        self.quat_w = 0.
      if self.quat_x is None:
        self.quat_x = 0.
      if self.quat_y is None:
        self.quat_y = 0.
      if self.quat_z is None:
        self.quat_z = 0.
      if self.linearAccel_x is None:
        self.linearAccel_x = 0.
      if self.linearAccel_y is None:
        self.linearAccel_y = 0.
      if self.linearAccel_z is None:
        self.linearAccel_z = 0.
      if self.gravity_x is None:
        self.gravity_x = 0.
      if self.gravity_y is None:
        self.gravity_y = 0.
      if self.gravity_z is None:
        self.gravity_z = 0.
    else:
      self.count = 0
      self.timeStamp = 0.
      self.gravWithAccel_x = 0.
      self.gravWithAccel_y = 0.
      self.gravWithAccel_z = 0.
      self.quat_w = 0.
      self.quat_x = 0.
      self.quat_y = 0.
      self.quat_z = 0.
      self.linearAccel_x = 0.
      self.linearAccel_y = 0.
      self.linearAccel_z = 0.
      self.gravity_x = 0.
      self.gravity_y = 0.
      self.gravity_z = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_qd13f.pack(_x.count, _x.timeStamp, _x.gravWithAccel_x, _x.gravWithAccel_y, _x.gravWithAccel_z, _x.quat_w, _x.quat_x, _x.quat_y, _x.quat_z, _x.linearAccel_x, _x.linearAccel_y, _x.linearAccel_z, _x.gravity_x, _x.gravity_y, _x.gravity_z))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 68
      (_x.count, _x.timeStamp, _x.gravWithAccel_x, _x.gravWithAccel_y, _x.gravWithAccel_z, _x.quat_w, _x.quat_x, _x.quat_y, _x.quat_z, _x.linearAccel_x, _x.linearAccel_y, _x.linearAccel_z, _x.gravity_x, _x.gravity_y, _x.gravity_z,) = _struct_qd13f.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_qd13f.pack(_x.count, _x.timeStamp, _x.gravWithAccel_x, _x.gravWithAccel_y, _x.gravWithAccel_z, _x.quat_w, _x.quat_x, _x.quat_y, _x.quat_z, _x.linearAccel_x, _x.linearAccel_y, _x.linearAccel_z, _x.gravity_x, _x.gravity_y, _x.gravity_z))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 68
      (_x.count, _x.timeStamp, _x.gravWithAccel_x, _x.gravWithAccel_y, _x.gravWithAccel_z, _x.quat_w, _x.quat_x, _x.quat_y, _x.quat_z, _x.linearAccel_x, _x.linearAccel_y, _x.linearAccel_z, _x.gravity_x, _x.gravity_y, _x.gravity_z,) = _struct_qd13f.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_qd13f = struct.Struct("<qd13f")
