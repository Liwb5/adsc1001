// Generated by gencpp from file imu_image/imuData.msg
// DO NOT EDIT!


#ifndef IMU_IMAGE_MESSAGE_IMUDATA_H
#define IMU_IMAGE_MESSAGE_IMUDATA_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace imu_image
{
template <class ContainerAllocator>
struct imuData_
{
  typedef imuData_<ContainerAllocator> Type;

  imuData_()
    : count(0)
    , timeStamp(0.0)
    , gravWithAccel_x(0.0)
    , gravWithAccel_y(0.0)
    , gravWithAccel_z(0.0)
    , quat_w(0.0)
    , quat_x(0.0)
    , quat_y(0.0)
    , quat_z(0.0)
    , linearAccel_x(0.0)
    , linearAccel_y(0.0)
    , linearAccel_z(0.0)
    , gravity_x(0.0)
    , gravity_y(0.0)
    , gravity_z(0.0)  {
    }
  imuData_(const ContainerAllocator& _alloc)
    : count(0)
    , timeStamp(0.0)
    , gravWithAccel_x(0.0)
    , gravWithAccel_y(0.0)
    , gravWithAccel_z(0.0)
    , quat_w(0.0)
    , quat_x(0.0)
    , quat_y(0.0)
    , quat_z(0.0)
    , linearAccel_x(0.0)
    , linearAccel_y(0.0)
    , linearAccel_z(0.0)
    , gravity_x(0.0)
    , gravity_y(0.0)
    , gravity_z(0.0)  {
  (void)_alloc;
    }



   typedef int64_t _count_type;
  _count_type count;

   typedef double _timeStamp_type;
  _timeStamp_type timeStamp;

   typedef float _gravWithAccel_x_type;
  _gravWithAccel_x_type gravWithAccel_x;

   typedef float _gravWithAccel_y_type;
  _gravWithAccel_y_type gravWithAccel_y;

   typedef float _gravWithAccel_z_type;
  _gravWithAccel_z_type gravWithAccel_z;

   typedef float _quat_w_type;
  _quat_w_type quat_w;

   typedef float _quat_x_type;
  _quat_x_type quat_x;

   typedef float _quat_y_type;
  _quat_y_type quat_y;

   typedef float _quat_z_type;
  _quat_z_type quat_z;

   typedef float _linearAccel_x_type;
  _linearAccel_x_type linearAccel_x;

   typedef float _linearAccel_y_type;
  _linearAccel_y_type linearAccel_y;

   typedef float _linearAccel_z_type;
  _linearAccel_z_type linearAccel_z;

   typedef float _gravity_x_type;
  _gravity_x_type gravity_x;

   typedef float _gravity_y_type;
  _gravity_y_type gravity_y;

   typedef float _gravity_z_type;
  _gravity_z_type gravity_z;




  typedef boost::shared_ptr< ::imu_image::imuData_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::imu_image::imuData_<ContainerAllocator> const> ConstPtr;

}; // struct imuData_

typedef ::imu_image::imuData_<std::allocator<void> > imuData;

typedef boost::shared_ptr< ::imu_image::imuData > imuDataPtr;
typedef boost::shared_ptr< ::imu_image::imuData const> imuDataConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::imu_image::imuData_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::imu_image::imuData_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace imu_image

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'imu_image': ['/home/hmx/ws_catkin/src/imu_image/msg'], 'std_msgs': ['/opt/ros/jade/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::imu_image::imuData_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::imu_image::imuData_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::imu_image::imuData_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::imu_image::imuData_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::imu_image::imuData_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::imu_image::imuData_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::imu_image::imuData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "5325de38e0d380e0ca6702d20e83c608";
  }

  static const char* value(const ::imu_image::imuData_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x5325de38e0d380e0ULL;
  static const uint64_t static_value2 = 0xca6702d20e83c608ULL;
};

template<class ContainerAllocator>
struct DataType< ::imu_image::imuData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "imu_image/imuData";
  }

  static const char* value(const ::imu_image::imuData_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::imu_image::imuData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int64 count\n\
float64 timeStamp\n\
float32 gravWithAccel_x\n\
float32 gravWithAccel_y\n\
float32 gravWithAccel_z\n\
float32 quat_w\n\
float32 quat_x\n\
float32 quat_y\n\
float32 quat_z\n\
float32 linearAccel_x\n\
float32 linearAccel_y\n\
float32 linearAccel_z\n\
float32 gravity_x\n\
float32 gravity_y\n\
float32 gravity_z\n\
";
  }

  static const char* value(const ::imu_image::imuData_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::imu_image::imuData_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.count);
      stream.next(m.timeStamp);
      stream.next(m.gravWithAccel_x);
      stream.next(m.gravWithAccel_y);
      stream.next(m.gravWithAccel_z);
      stream.next(m.quat_w);
      stream.next(m.quat_x);
      stream.next(m.quat_y);
      stream.next(m.quat_z);
      stream.next(m.linearAccel_x);
      stream.next(m.linearAccel_y);
      stream.next(m.linearAccel_z);
      stream.next(m.gravity_x);
      stream.next(m.gravity_y);
      stream.next(m.gravity_z);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct imuData_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::imu_image::imuData_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::imu_image::imuData_<ContainerAllocator>& v)
  {
    s << indent << "count: ";
    Printer<int64_t>::stream(s, indent + "  ", v.count);
    s << indent << "timeStamp: ";
    Printer<double>::stream(s, indent + "  ", v.timeStamp);
    s << indent << "gravWithAccel_x: ";
    Printer<float>::stream(s, indent + "  ", v.gravWithAccel_x);
    s << indent << "gravWithAccel_y: ";
    Printer<float>::stream(s, indent + "  ", v.gravWithAccel_y);
    s << indent << "gravWithAccel_z: ";
    Printer<float>::stream(s, indent + "  ", v.gravWithAccel_z);
    s << indent << "quat_w: ";
    Printer<float>::stream(s, indent + "  ", v.quat_w);
    s << indent << "quat_x: ";
    Printer<float>::stream(s, indent + "  ", v.quat_x);
    s << indent << "quat_y: ";
    Printer<float>::stream(s, indent + "  ", v.quat_y);
    s << indent << "quat_z: ";
    Printer<float>::stream(s, indent + "  ", v.quat_z);
    s << indent << "linearAccel_x: ";
    Printer<float>::stream(s, indent + "  ", v.linearAccel_x);
    s << indent << "linearAccel_y: ";
    Printer<float>::stream(s, indent + "  ", v.linearAccel_y);
    s << indent << "linearAccel_z: ";
    Printer<float>::stream(s, indent + "  ", v.linearAccel_z);
    s << indent << "gravity_x: ";
    Printer<float>::stream(s, indent + "  ", v.gravity_x);
    s << indent << "gravity_y: ";
    Printer<float>::stream(s, indent + "  ", v.gravity_y);
    s << indent << "gravity_z: ";
    Printer<float>::stream(s, indent + "  ", v.gravity_z);
  }
};

} // namespace message_operations
} // namespace ros

#endif // IMU_IMAGE_MESSAGE_IMUDATA_H
